
MCU_LAB_3_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002594  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026a0  080026a0  000036a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c4  080026c4  00004030  2**0
                  CONTENTS
  4 .ARM          00000000  080026c4  080026c4  00004030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c4  080026c4  00004030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c4  080026c4  000036c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080026cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000030  080026fc  00004030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080026fc  0000418c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083ef  00000000  00000000  00004059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b90  00000000  00000000  0000c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0000dfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a9  00000000  00000000  0000ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cee  00000000  00000000  0000f1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf04  00000000  00000000  00025e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824a6  00000000  00000000  00031d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000b4284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000b6a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002688 	.word	0x08002688

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002688 	.word	0x08002688

0800014c <getKeyInput>:
		return 1;
	}
	return 0;
}

void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
//  KeyReg2 = KeyReg1;
//  KeyReg1 = KeyReg0;
  KeyReg[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000152:	2108      	movs	r1, #8
 8000154:	4854      	ldr	r0, [pc, #336]	@ (80002a8 <getKeyInput+0x15c>)
 8000156:	f001 fa81 	bl	800165c <HAL_GPIO_ReadPin>
 800015a:	4603      	mov	r3, r0
 800015c:	461a      	mov	r2, r3
 800015e:	4b53      	ldr	r3, [pc, #332]	@ (80002ac <getKeyInput+0x160>)
 8000160:	601a      	str	r2, [r3, #0]
  KeyReg[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000162:	2120      	movs	r1, #32
 8000164:	4850      	ldr	r0, [pc, #320]	@ (80002a8 <getKeyInput+0x15c>)
 8000166:	f001 fa79 	bl	800165c <HAL_GPIO_ReadPin>
 800016a:	4603      	mov	r3, r0
 800016c:	461a      	mov	r2, r3
 800016e:	4b4f      	ldr	r3, [pc, #316]	@ (80002ac <getKeyInput+0x160>)
 8000170:	605a      	str	r2, [r3, #4]
  KeyReg[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000172:	2110      	movs	r1, #16
 8000174:	484c      	ldr	r0, [pc, #304]	@ (80002a8 <getKeyInput+0x15c>)
 8000176:	f001 fa71 	bl	800165c <HAL_GPIO_ReadPin>
 800017a:	4603      	mov	r3, r0
 800017c:	461a      	mov	r2, r3
 800017e:	4b4b      	ldr	r3, [pc, #300]	@ (80002ac <getKeyInput+0x160>)
 8000180:	609a      	str	r2, [r3, #8]
//  KeyReg[5] = HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin);
//  KeyReg[6] = HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin);
//  KeyReg[7] = HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin);
//  KeyReg[8] = HAL_GPIO_ReadPin(BUTTON9_GPIO_Port, BUTTON9_Pin);
//  KeyReg[9] = HAL_GPIO_ReadPin(BUTTON10_GPIO_Port, BUTTON10_Pin);
  for(int i=0;i<3;i++){
 8000182:	2300      	movs	r3, #0
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	e086      	b.n	8000296 <getKeyInput+0x14a>
	  switch(state[i]){
 8000188:	4a49      	ldr	r2, [pc, #292]	@ (80002b0 <getKeyInput+0x164>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b04      	cmp	r3, #4
 8000192:	d878      	bhi.n	8000286 <getKeyInput+0x13a>
 8000194:	a201      	add	r2, pc, #4	@ (adr r2, 800019c <getKeyInput+0x50>)
 8000196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019a:	bf00      	nop
 800019c:	080001b1 	.word	0x080001b1
 80001a0:	080001d3 	.word	0x080001d3
 80001a4:	080001f7 	.word	0x080001f7
 80001a8:	0800021b 	.word	0x0800021b
 80001ac:	08000251 	.word	0x08000251
	  	case 0:	// KeyReg2 == NORMAL_STATE && KeyReg1 == NORMAL_STATE
		  button_flag[i] = 0;
 80001b0:	4a40      	ldr	r2, [pc, #256]	@ (80002b4 <getKeyInput+0x168>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2100      	movs	r1, #0
 80001b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if(KeyReg[i] == PRESSED_STATE) state[i] = 1;
 80001ba:	4a3c      	ldr	r2, [pc, #240]	@ (80002ac <getKeyInput+0x160>)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d161      	bne.n	800028a <getKeyInput+0x13e>
 80001c6:	4a3a      	ldr	r2, [pc, #232]	@ (80002b0 <getKeyInput+0x164>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2101      	movs	r1, #1
 80001cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001d0:	e05b      	b.n	800028a <getKeyInput+0x13e>
		case 1:	// KeyReg2 == NORMAL_STATE && KeyReg1 == PRESSED_STATE
			if (KeyReg[i] == PRESSED_STATE)
 80001d2:	4a36      	ldr	r2, [pc, #216]	@ (80002ac <getKeyInput+0x160>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d105      	bne.n	80001ea <getKeyInput+0x9e>
				state[i] = 3;
 80001de:	4a34      	ldr	r2, [pc, #208]	@ (80002b0 <getKeyInput+0x164>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2103      	movs	r1, #3
 80001e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			else
				state[i] = 2;
			break;
 80001e8:	e052      	b.n	8000290 <getKeyInput+0x144>
				state[i] = 2;
 80001ea:	4a31      	ldr	r2, [pc, #196]	@ (80002b0 <getKeyInput+0x164>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2102      	movs	r1, #2
 80001f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001f4:	e04c      	b.n	8000290 <getKeyInput+0x144>
		case 2:	// KeyReg2 == PRESSED_STATE && KeyReg1 == NORMAL_STATE
			if (KeyReg[i] == PRESSED_STATE)
 80001f6:	4a2d      	ldr	r2, [pc, #180]	@ (80002ac <getKeyInput+0x160>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d105      	bne.n	800020e <getKeyInput+0xc2>
				state[i] = 1;
 8000202:	4a2b      	ldr	r2, [pc, #172]	@ (80002b0 <getKeyInput+0x164>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2101      	movs	r1, #1
 8000208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			else
				state[i] = 0;
			break;
 800020c:	e040      	b.n	8000290 <getKeyInput+0x144>
				state[i] = 0;
 800020e:	4a28      	ldr	r2, [pc, #160]	@ (80002b0 <getKeyInput+0x164>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2100      	movs	r1, #0
 8000214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000218:	e03a      	b.n	8000290 <getKeyInput+0x144>
		case 3:	// KeyReg2 == PRESSED_STATE && KeyReg1 == PRESSED_STATE
			if (KeyReg[i] == PRESSED_STATE) {
 800021a:	4a24      	ldr	r2, [pc, #144]	@ (80002ac <getKeyInput+0x160>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d10e      	bne.n	8000244 <getKeyInput+0xf8>
				button_flag[i] = 1;
 8000226:	4a23      	ldr	r2, [pc, #140]	@ (80002b4 <getKeyInput+0x168>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2101      	movs	r1, #1
 800022c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				TimeOutForKeyPress = 500;
 8000230:	4b21      	ldr	r3, [pc, #132]	@ (80002b8 <getKeyInput+0x16c>)
 8000232:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000236:	601a      	str	r2, [r3, #0]
				state[i] = 4;
 8000238:	4a1d      	ldr	r2, [pc, #116]	@ (80002b0 <getKeyInput+0x164>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2104      	movs	r1, #4
 800023e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			} else
				state[i] = 1;
			break;
 8000242:	e025      	b.n	8000290 <getKeyInput+0x144>
				state[i] = 1;
 8000244:	4a1a      	ldr	r2, [pc, #104]	@ (80002b0 <getKeyInput+0x164>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2101      	movs	r1, #1
 800024a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800024e:	e01f      	b.n	8000290 <getKeyInput+0x144>
		case 4: // KeyReg2 == NORMAL_STATE && KeyReg1 == NORMAL_STATE && KeyReg0 = PRESSED_STATE
			if (KeyReg[i] != PRESSED_STATE) {
 8000250:	4a16      	ldr	r2, [pc, #88]	@ (80002ac <getKeyInput+0x160>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d005      	beq.n	8000268 <getKeyInput+0x11c>
				state[i] = 1;
 800025c:	4a14      	ldr	r2, [pc, #80]	@ (80002b0 <getKeyInput+0x164>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2101      	movs	r1, #1
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000266:	e013      	b.n	8000290 <getKeyInput+0x144>
			}
			TimeOutForKeyPress--;
 8000268:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <getKeyInput+0x16c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	4a12      	ldr	r2, [pc, #72]	@ (80002b8 <getKeyInput+0x16c>)
 8000270:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) button_long_pressed[i] = 1;
 8000272:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <getKeyInput+0x16c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d109      	bne.n	800028e <getKeyInput+0x142>
 800027a:	4a10      	ldr	r2, [pc, #64]	@ (80002bc <getKeyInput+0x170>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2101      	movs	r1, #1
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000284:	e003      	b.n	800028e <getKeyInput+0x142>
		default:
			break;
 8000286:	bf00      	nop
 8000288:	e002      	b.n	8000290 <getKeyInput+0x144>
			break;
 800028a:	bf00      	nop
 800028c:	e000      	b.n	8000290 <getKeyInput+0x144>
			break;
 800028e:	bf00      	nop
  for(int i=0;i<3;i++){
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b02      	cmp	r3, #2
 800029a:	f77f af75 	ble.w	8000188 <getKeyInput+0x3c>
	  }
  }
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40010c00 	.word	0x40010c00
 80002ac:	2000004c 	.word	0x2000004c
 80002b0:	200000c4 	.word	0x200000c4
 80002b4:	2000009c 	.word	0x2000009c
 80002b8:	20000000 	.word	0x20000000
 80002bc:	20000074 	.word	0x20000074

080002c0 <fsm_autorun>:
 */
#include "global.h"
#include "fsm_autorun.h"
int status = INIT;
int index_led = 0;
void fsm_autorun(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch(status){
 80002c4:	4bbf      	ldr	r3, [pc, #764]	@ (80005c4 <fsm_autorun+0x304>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b04      	cmp	r3, #4
 80002ca:	f200 813d 	bhi.w	8000548 <fsm_autorun+0x288>
 80002ce:	a201      	add	r2, pc, #4	@ (adr r2, 80002d4 <fsm_autorun+0x14>)
 80002d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d4:	0800032b 	.word	0x0800032b
 80002d8:	0800038d 	.word	0x0800038d
 80002dc:	080004e9 	.word	0x080004e9
 80002e0:	0800043b 	.word	0x0800043b
 80002e4:	080002e9 	.word	0x080002e9
	case INIT:
		status = RED_GREEN;
 80002e8:	4bb6      	ldr	r3, [pc, #728]	@ (80005c4 <fsm_autorun+0x304>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
		setTimer(1, 1000*red_time);
 80002ee:	4bb6      	ldr	r3, [pc, #728]	@ (80005c8 <fsm_autorun+0x308>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002f6:	fb02 f303 	mul.w	r3, r2, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	2001      	movs	r0, #1
 80002fe:	f000 fe4b 	bl	8000f98 <setTimer>
		setTimer(2, 1000*green_time);
 8000302:	4bb2      	ldr	r3, [pc, #712]	@ (80005cc <fsm_autorun+0x30c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800030a:	fb02 f303 	mul.w	r3, r2, r3
 800030e:	4619      	mov	r1, r3
 8000310:	2002      	movs	r0, #2
 8000312:	f000 fe41 	bl	8000f98 <setTimer>
		setTimer(3,250);
 8000316:	21fa      	movs	r1, #250	@ 0xfa
 8000318:	2003      	movs	r0, #3
 800031a:	f000 fe3d 	bl	8000f98 <setTimer>
		setTimer(4,1000);
 800031e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000322:	2004      	movs	r0, #4
 8000324:	f000 fe38 	bl	8000f98 <setTimer>
		break;
 8000328:	e117      	b.n	800055a <fsm_autorun+0x29a>
	case RED_GREEN:
		led_red_and_green();
 800032a:	f000 fbed 	bl	8000b08 <led_red_and_green>
		if(flag_timer[2] == 1){
 800032e:	4ba8      	ldr	r3, [pc, #672]	@ (80005d0 <fsm_autorun+0x310>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	f040 810a 	bne.w	800054c <fsm_autorun+0x28c>
			status = RED_YELLOW;
 8000338:	4ba2      	ldr	r3, [pc, #648]	@ (80005c4 <fsm_autorun+0x304>)
 800033a:	2201      	movs	r2, #1
 800033c:	601a      	str	r2, [r3, #0]
			setTimer(2, 1000*yellow_time);
 800033e:	4ba5      	ldr	r3, [pc, #660]	@ (80005d4 <fsm_autorun+0x314>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000346:	fb02 f303 	mul.w	r3, r2, r3
 800034a:	4619      	mov	r1, r3
 800034c:	2002      	movs	r0, #2
 800034e:	f000 fe23 	bl	8000f98 <setTimer>
			update7SegBuffer(2, yellow_time/10);
 8000352:	4ba0      	ldr	r3, [pc, #640]	@ (80005d4 <fsm_autorun+0x314>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4aa0      	ldr	r2, [pc, #640]	@ (80005d8 <fsm_autorun+0x318>)
 8000358:	fb82 1203 	smull	r1, r2, r2, r3
 800035c:	1092      	asrs	r2, r2, #2
 800035e:	17db      	asrs	r3, r3, #31
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	4619      	mov	r1, r3
 8000364:	2002      	movs	r0, #2
 8000366:	f000 fbb5 	bl	8000ad4 <update7SegBuffer>
			update7SegBuffer(3, yellow_time%10);
 800036a:	4b9a      	ldr	r3, [pc, #616]	@ (80005d4 <fsm_autorun+0x314>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b9a      	ldr	r3, [pc, #616]	@ (80005d8 <fsm_autorun+0x318>)
 8000370:	fb83 1302 	smull	r1, r3, r3, r2
 8000374:	1099      	asrs	r1, r3, #2
 8000376:	17d3      	asrs	r3, r2, #31
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	460b      	mov	r3, r1
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	440b      	add	r3, r1
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	1ad1      	subs	r1, r2, r3
 8000384:	2003      	movs	r0, #3
 8000386:	f000 fba5 	bl	8000ad4 <update7SegBuffer>
		}
		break;
 800038a:	e0df      	b.n	800054c <fsm_autorun+0x28c>
	case RED_YELLOW:
		led_red_and_yellow();
 800038c:	f000 fbe6 	bl	8000b5c <led_red_and_yellow>
		if(flag_timer[2] == 1){
 8000390:	4b8f      	ldr	r3, [pc, #572]	@ (80005d0 <fsm_autorun+0x310>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	2b01      	cmp	r3, #1
 8000396:	f040 80db 	bne.w	8000550 <fsm_autorun+0x290>
			status = GREEN_RED;
 800039a:	4b8a      	ldr	r3, [pc, #552]	@ (80005c4 <fsm_autorun+0x304>)
 800039c:	2202      	movs	r2, #2
 800039e:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*green_time);
 80003a0:	4b8a      	ldr	r3, [pc, #552]	@ (80005cc <fsm_autorun+0x30c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003a8:	fb02 f303 	mul.w	r3, r2, r3
 80003ac:	4619      	mov	r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 fdf2 	bl	8000f98 <setTimer>
			setTimer(2, 1000*red_time);
 80003b4:	4b84      	ldr	r3, [pc, #528]	@ (80005c8 <fsm_autorun+0x308>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003bc:	fb02 f303 	mul.w	r3, r2, r3
 80003c0:	4619      	mov	r1, r3
 80003c2:	2002      	movs	r0, #2
 80003c4:	f000 fde8 	bl	8000f98 <setTimer>
			update7SegBuffer(0, green_time/10);
 80003c8:	4b80      	ldr	r3, [pc, #512]	@ (80005cc <fsm_autorun+0x30c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a82      	ldr	r2, [pc, #520]	@ (80005d8 <fsm_autorun+0x318>)
 80003ce:	fb82 1203 	smull	r1, r2, r2, r3
 80003d2:	1092      	asrs	r2, r2, #2
 80003d4:	17db      	asrs	r3, r3, #31
 80003d6:	1ad3      	subs	r3, r2, r3
 80003d8:	4619      	mov	r1, r3
 80003da:	2000      	movs	r0, #0
 80003dc:	f000 fb7a 	bl	8000ad4 <update7SegBuffer>
			update7SegBuffer(1, green_time%10);
 80003e0:	4b7a      	ldr	r3, [pc, #488]	@ (80005cc <fsm_autorun+0x30c>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	4b7c      	ldr	r3, [pc, #496]	@ (80005d8 <fsm_autorun+0x318>)
 80003e6:	fb83 1302 	smull	r1, r3, r3, r2
 80003ea:	1099      	asrs	r1, r3, #2
 80003ec:	17d3      	asrs	r3, r2, #31
 80003ee:	1ac9      	subs	r1, r1, r3
 80003f0:	460b      	mov	r3, r1
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	440b      	add	r3, r1
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	1ad1      	subs	r1, r2, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 fb6a 	bl	8000ad4 <update7SegBuffer>
			update7SegBuffer(2, red_time/10);
 8000400:	4b71      	ldr	r3, [pc, #452]	@ (80005c8 <fsm_autorun+0x308>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a74      	ldr	r2, [pc, #464]	@ (80005d8 <fsm_autorun+0x318>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	1092      	asrs	r2, r2, #2
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	4619      	mov	r1, r3
 8000412:	2002      	movs	r0, #2
 8000414:	f000 fb5e 	bl	8000ad4 <update7SegBuffer>
			update7SegBuffer(3, red_time%10);
 8000418:	4b6b      	ldr	r3, [pc, #428]	@ (80005c8 <fsm_autorun+0x308>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4b6e      	ldr	r3, [pc, #440]	@ (80005d8 <fsm_autorun+0x318>)
 800041e:	fb83 1302 	smull	r1, r3, r3, r2
 8000422:	1099      	asrs	r1, r3, #2
 8000424:	17d3      	asrs	r3, r2, #31
 8000426:	1ac9      	subs	r1, r1, r3
 8000428:	460b      	mov	r3, r1
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	440b      	add	r3, r1
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	1ad1      	subs	r1, r2, r3
 8000432:	2003      	movs	r0, #3
 8000434:	f000 fb4e 	bl	8000ad4 <update7SegBuffer>
		}
		break;
 8000438:	e08a      	b.n	8000550 <fsm_autorun+0x290>
	case YELLOW_RED:
		led_yellow_and_red();
 800043a:	f000 fbe3 	bl	8000c04 <led_yellow_and_red>
		if(flag_timer[1] ==1){
 800043e:	4b64      	ldr	r3, [pc, #400]	@ (80005d0 <fsm_autorun+0x310>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	2b01      	cmp	r3, #1
 8000444:	f040 8086 	bne.w	8000554 <fsm_autorun+0x294>
			status = RED_GREEN;
 8000448:	4b5e      	ldr	r3, [pc, #376]	@ (80005c4 <fsm_autorun+0x304>)
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*red_time);
 800044e:	4b5e      	ldr	r3, [pc, #376]	@ (80005c8 <fsm_autorun+0x308>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000456:	fb02 f303 	mul.w	r3, r2, r3
 800045a:	4619      	mov	r1, r3
 800045c:	2001      	movs	r0, #1
 800045e:	f000 fd9b 	bl	8000f98 <setTimer>
			setTimer(2,1000*green_time);
 8000462:	4b5a      	ldr	r3, [pc, #360]	@ (80005cc <fsm_autorun+0x30c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800046a:	fb02 f303 	mul.w	r3, r2, r3
 800046e:	4619      	mov	r1, r3
 8000470:	2002      	movs	r0, #2
 8000472:	f000 fd91 	bl	8000f98 <setTimer>
			update7SegBuffer(0, red_time/10);
 8000476:	4b54      	ldr	r3, [pc, #336]	@ (80005c8 <fsm_autorun+0x308>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a57      	ldr	r2, [pc, #348]	@ (80005d8 <fsm_autorun+0x318>)
 800047c:	fb82 1203 	smull	r1, r2, r2, r3
 8000480:	1092      	asrs	r2, r2, #2
 8000482:	17db      	asrs	r3, r3, #31
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	4619      	mov	r1, r3
 8000488:	2000      	movs	r0, #0
 800048a:	f000 fb23 	bl	8000ad4 <update7SegBuffer>
			update7SegBuffer(1, red_time%10);
 800048e:	4b4e      	ldr	r3, [pc, #312]	@ (80005c8 <fsm_autorun+0x308>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b51      	ldr	r3, [pc, #324]	@ (80005d8 <fsm_autorun+0x318>)
 8000494:	fb83 1302 	smull	r1, r3, r3, r2
 8000498:	1099      	asrs	r1, r3, #2
 800049a:	17d3      	asrs	r3, r2, #31
 800049c:	1ac9      	subs	r1, r1, r3
 800049e:	460b      	mov	r3, r1
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	440b      	add	r3, r1
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	1ad1      	subs	r1, r2, r3
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 fb13 	bl	8000ad4 <update7SegBuffer>
			update7SegBuffer(2, green_time/10);
 80004ae:	4b47      	ldr	r3, [pc, #284]	@ (80005cc <fsm_autorun+0x30c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a49      	ldr	r2, [pc, #292]	@ (80005d8 <fsm_autorun+0x318>)
 80004b4:	fb82 1203 	smull	r1, r2, r2, r3
 80004b8:	1092      	asrs	r2, r2, #2
 80004ba:	17db      	asrs	r3, r3, #31
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	2002      	movs	r0, #2
 80004c2:	f000 fb07 	bl	8000ad4 <update7SegBuffer>
			update7SegBuffer(3, green_time%10);
 80004c6:	4b41      	ldr	r3, [pc, #260]	@ (80005cc <fsm_autorun+0x30c>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b43      	ldr	r3, [pc, #268]	@ (80005d8 <fsm_autorun+0x318>)
 80004cc:	fb83 1302 	smull	r1, r3, r3, r2
 80004d0:	1099      	asrs	r1, r3, #2
 80004d2:	17d3      	asrs	r3, r2, #31
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	440b      	add	r3, r1
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	1ad1      	subs	r1, r2, r3
 80004e0:	2003      	movs	r0, #3
 80004e2:	f000 faf7 	bl	8000ad4 <update7SegBuffer>
		}
		break;
 80004e6:	e035      	b.n	8000554 <fsm_autorun+0x294>
	case GREEN_RED:
		led_green_and_red();
 80004e8:	f000 fb62 	bl	8000bb0 <led_green_and_red>
		if(flag_timer[1] == 1){
 80004ec:	4b38      	ldr	r3, [pc, #224]	@ (80005d0 <fsm_autorun+0x310>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d131      	bne.n	8000558 <fsm_autorun+0x298>
			status = YELLOW_RED;
 80004f4:	4b33      	ldr	r3, [pc, #204]	@ (80005c4 <fsm_autorun+0x304>)
 80004f6:	2203      	movs	r2, #3
 80004f8:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*yellow_time);
 80004fa:	4b36      	ldr	r3, [pc, #216]	@ (80005d4 <fsm_autorun+0x314>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	4619      	mov	r1, r3
 8000508:	2001      	movs	r0, #1
 800050a:	f000 fd45 	bl	8000f98 <setTimer>
			update7SegBuffer(0, yellow_time/10);
 800050e:	4b31      	ldr	r3, [pc, #196]	@ (80005d4 <fsm_autorun+0x314>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a31      	ldr	r2, [pc, #196]	@ (80005d8 <fsm_autorun+0x318>)
 8000514:	fb82 1203 	smull	r1, r2, r2, r3
 8000518:	1092      	asrs	r2, r2, #2
 800051a:	17db      	asrs	r3, r3, #31
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	4619      	mov	r1, r3
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fad7 	bl	8000ad4 <update7SegBuffer>
			update7SegBuffer(1, yellow_time%10);
 8000526:	4b2b      	ldr	r3, [pc, #172]	@ (80005d4 <fsm_autorun+0x314>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b2b      	ldr	r3, [pc, #172]	@ (80005d8 <fsm_autorun+0x318>)
 800052c:	fb83 1302 	smull	r1, r3, r3, r2
 8000530:	1099      	asrs	r1, r3, #2
 8000532:	17d3      	asrs	r3, r2, #31
 8000534:	1ac9      	subs	r1, r1, r3
 8000536:	460b      	mov	r3, r1
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	1ad1      	subs	r1, r2, r3
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fac7 	bl	8000ad4 <update7SegBuffer>
		}
		break;
 8000546:	e007      	b.n	8000558 <fsm_autorun+0x298>
	default:
		break;
 8000548:	bf00      	nop
 800054a:	e006      	b.n	800055a <fsm_autorun+0x29a>
		break;
 800054c:	bf00      	nop
 800054e:	e004      	b.n	800055a <fsm_autorun+0x29a>
		break;
 8000550:	bf00      	nop
 8000552:	e002      	b.n	800055a <fsm_autorun+0x29a>
		break;
 8000554:	bf00      	nop
 8000556:	e000      	b.n	800055a <fsm_autorun+0x29a>
		break;
 8000558:	bf00      	nop
	}
	if(flag_timer[3] == 1){
 800055a:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <fsm_autorun+0x310>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d116      	bne.n	8000590 <fsm_autorun+0x2d0>
		update7SEG(index_led++);
 8000562:	4b1e      	ldr	r3, [pc, #120]	@ (80005dc <fsm_autorun+0x31c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	491c      	ldr	r1, [pc, #112]	@ (80005dc <fsm_autorun+0x31c>)
 800056a:	600a      	str	r2, [r1, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fa3b 	bl	80009e8 <update7SEG>
		index_led%=4;
 8000572:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <fsm_autorun+0x31c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	425a      	negs	r2, r3
 8000578:	f003 0303 	and.w	r3, r3, #3
 800057c:	f002 0203 	and.w	r2, r2, #3
 8000580:	bf58      	it	pl
 8000582:	4253      	negpl	r3, r2
 8000584:	4a15      	ldr	r2, [pc, #84]	@ (80005dc <fsm_autorun+0x31c>)
 8000586:	6013      	str	r3, [r2, #0]
		setTimer(3,250);
 8000588:	21fa      	movs	r1, #250	@ 0xfa
 800058a:	2003      	movs	r0, #3
 800058c:	f000 fd04 	bl	8000f98 <setTimer>
	}
	if(flag_timer[4] == 1){
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <fsm_autorun+0x310>)
 8000592:	691b      	ldr	r3, [r3, #16]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d112      	bne.n	80005be <fsm_autorun+0x2fe>
		update7SegBuffer(1,led_buffer[1]-1);
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <fsm_autorun+0x320>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	3b01      	subs	r3, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fa97 	bl	8000ad4 <update7SegBuffer>
		update7SegBuffer(3, led_buffer[3]-1);
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <fsm_autorun+0x320>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	2003      	movs	r0, #3
 80005b0:	f000 fa90 	bl	8000ad4 <update7SegBuffer>
		setTimer(4,1000);
 80005b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005b8:	2004      	movs	r0, #4
 80005ba:	f000 fced 	bl	8000f98 <setTimer>
	}
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000004 	.word	0x20000004
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000010 	.word	0x20000010
 80005d0:	20000160 	.word	0x20000160
 80005d4:	2000000c 	.word	0x2000000c
 80005d8:	66666667 	.word	0x66666667
 80005dc:	200000ec 	.word	0x200000ec
 80005e0:	20000014 	.word	0x20000014

080005e4 <display7SEG>:
 */
#include "main.h"
#include "timer.h"
#include "led7_segment.h"
int led_buffer[4] = {0,7,0,2};
void display7SEG(int num){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	switch(num){
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b09      	cmp	r3, #9
 80005f0:	f200 81c8 	bhi.w	8000984 <display7SEG+0x3a0>
 80005f4:	a201      	add	r2, pc, #4	@ (adr r2, 80005fc <display7SEG+0x18>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000625 	.word	0x08000625
 8000600:	0800067b 	.word	0x0800067b
 8000604:	080006d1 	.word	0x080006d1
 8000608:	08000727 	.word	0x08000727
 800060c:	0800077d 	.word	0x0800077d
 8000610:	080007d3 	.word	0x080007d3
 8000614:	08000829 	.word	0x08000829
 8000618:	0800087f 	.word	0x0800087f
 800061c:	080008d5 	.word	0x080008d5
 8000620:	0800092b 	.word	0x0800092b
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET); //a
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800062a:	48d5      	ldr	r0, [pc, #852]	@ (8000980 <display7SEG+0x39c>)
 800062c:	f001 f82d 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET); //b
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000636:	48d2      	ldr	r0, [pc, #840]	@ (8000980 <display7SEG+0x39c>)
 8000638:	f001 f827 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);//c
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000642:	48cf      	ldr	r0, [pc, #828]	@ (8000980 <display7SEG+0x39c>)
 8000644:	f001 f821 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);//d
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800064e:	48cc      	ldr	r0, [pc, #816]	@ (8000980 <display7SEG+0x39c>)
 8000650:	f001 f81b 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET); //e
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065a:	48c9      	ldr	r0, [pc, #804]	@ (8000980 <display7SEG+0x39c>)
 800065c:	f001 f815 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET); //f
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000666:	48c6      	ldr	r0, [pc, #792]	@ (8000980 <display7SEG+0x39c>)
 8000668:	f001 f80f 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET); //g
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000672:	48c3      	ldr	r0, [pc, #780]	@ (8000980 <display7SEG+0x39c>)
 8000674:	f001 f809 	bl	800168a <HAL_GPIO_WritePin>
		break;
 8000678:	e1af      	b.n	80009da <display7SEG+0x3f6>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET); //a
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000680:	48bf      	ldr	r0, [pc, #764]	@ (8000980 <display7SEG+0x39c>)
 8000682:	f001 f802 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET); //b
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800068c:	48bc      	ldr	r0, [pc, #752]	@ (8000980 <display7SEG+0x39c>)
 800068e:	f000 fffc 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);//c
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000698:	48b9      	ldr	r0, [pc, #740]	@ (8000980 <display7SEG+0x39c>)
 800069a:	f000 fff6 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);//d
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a4:	48b6      	ldr	r0, [pc, #728]	@ (8000980 <display7SEG+0x39c>)
 80006a6:	f000 fff0 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET); //e
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b0:	48b3      	ldr	r0, [pc, #716]	@ (8000980 <display7SEG+0x39c>)
 80006b2:	f000 ffea 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET); //f
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006bc:	48b0      	ldr	r0, [pc, #704]	@ (8000980 <display7SEG+0x39c>)
 80006be:	f000 ffe4 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET); //g
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c8:	48ad      	ldr	r0, [pc, #692]	@ (8000980 <display7SEG+0x39c>)
 80006ca:	f000 ffde 	bl	800168a <HAL_GPIO_WritePin>
		break;
 80006ce:	e184      	b.n	80009da <display7SEG+0x3f6>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d6:	48aa      	ldr	r0, [pc, #680]	@ (8000980 <display7SEG+0x39c>)
 80006d8:	f000 ffd7 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e2:	48a7      	ldr	r0, [pc, #668]	@ (8000980 <display7SEG+0x39c>)
 80006e4:	f000 ffd1 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET); //c
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ee:	48a4      	ldr	r0, [pc, #656]	@ (8000980 <display7SEG+0x39c>)
 80006f0:	f000 ffcb 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006fa:	48a1      	ldr	r0, [pc, #644]	@ (8000980 <display7SEG+0x39c>)
 80006fc:	f000 ffc5 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET); //e
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000706:	489e      	ldr	r0, [pc, #632]	@ (8000980 <display7SEG+0x39c>)
 8000708:	f000 ffbf 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET); //f
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000712:	489b      	ldr	r0, [pc, #620]	@ (8000980 <display7SEG+0x39c>)
 8000714:	f000 ffb9 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071e:	4898      	ldr	r0, [pc, #608]	@ (8000980 <display7SEG+0x39c>)
 8000720:	f000 ffb3 	bl	800168a <HAL_GPIO_WritePin>
		break;
 8000724:	e159      	b.n	80009da <display7SEG+0x3f6>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072c:	4894      	ldr	r0, [pc, #592]	@ (8000980 <display7SEG+0x39c>)
 800072e:	f000 ffac 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000738:	4891      	ldr	r0, [pc, #580]	@ (8000980 <display7SEG+0x39c>)
 800073a:	f000 ffa6 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000744:	488e      	ldr	r0, [pc, #568]	@ (8000980 <display7SEG+0x39c>)
 8000746:	f000 ffa0 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000750:	488b      	ldr	r0, [pc, #556]	@ (8000980 <display7SEG+0x39c>)
 8000752:	f000 ff9a 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800075c:	4888      	ldr	r0, [pc, #544]	@ (8000980 <display7SEG+0x39c>)
 800075e:	f000 ff94 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET); //f
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000768:	4885      	ldr	r0, [pc, #532]	@ (8000980 <display7SEG+0x39c>)
 800076a:	f000 ff8e 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000774:	4882      	ldr	r0, [pc, #520]	@ (8000980 <display7SEG+0x39c>)
 8000776:	f000 ff88 	bl	800168a <HAL_GPIO_WritePin>
		break;
 800077a:	e12e      	b.n	80009da <display7SEG+0x3f6>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET); //a
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000782:	487f      	ldr	r0, [pc, #508]	@ (8000980 <display7SEG+0x39c>)
 8000784:	f000 ff81 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078e:	487c      	ldr	r0, [pc, #496]	@ (8000980 <display7SEG+0x39c>)
 8000790:	f000 ff7b 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800079a:	4879      	ldr	r0, [pc, #484]	@ (8000980 <display7SEG+0x39c>)
 800079c:	f000 ff75 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET); //d
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a6:	4876      	ldr	r0, [pc, #472]	@ (8000980 <display7SEG+0x39c>)
 80007a8:	f000 ff6f 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b2:	4873      	ldr	r0, [pc, #460]	@ (8000980 <display7SEG+0x39c>)
 80007b4:	f000 ff69 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007be:	4870      	ldr	r0, [pc, #448]	@ (8000980 <display7SEG+0x39c>)
 80007c0:	f000 ff63 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ca:	486d      	ldr	r0, [pc, #436]	@ (8000980 <display7SEG+0x39c>)
 80007cc:	f000 ff5d 	bl	800168a <HAL_GPIO_WritePin>
		break;
 80007d0:	e103      	b.n	80009da <display7SEG+0x3f6>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d8:	4869      	ldr	r0, [pc, #420]	@ (8000980 <display7SEG+0x39c>)
 80007da:	f000 ff56 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET); //b
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e4:	4866      	ldr	r0, [pc, #408]	@ (8000980 <display7SEG+0x39c>)
 80007e6:	f000 ff50 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f0:	4863      	ldr	r0, [pc, #396]	@ (8000980 <display7SEG+0x39c>)
 80007f2:	f000 ff4a 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fc:	4860      	ldr	r0, [pc, #384]	@ (8000980 <display7SEG+0x39c>)
 80007fe:	f000 ff44 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000808:	485d      	ldr	r0, [pc, #372]	@ (8000980 <display7SEG+0x39c>)
 800080a:	f000 ff3e 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000814:	485a      	ldr	r0, [pc, #360]	@ (8000980 <display7SEG+0x39c>)
 8000816:	f000 ff38 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000820:	4857      	ldr	r0, [pc, #348]	@ (8000980 <display7SEG+0x39c>)
 8000822:	f000 ff32 	bl	800168a <HAL_GPIO_WritePin>
		break;
 8000826:	e0d8      	b.n	80009da <display7SEG+0x3f6>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800082e:	4854      	ldr	r0, [pc, #336]	@ (8000980 <display7SEG+0x39c>)
 8000830:	f000 ff2b 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET); //b
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800083a:	4851      	ldr	r0, [pc, #324]	@ (8000980 <display7SEG+0x39c>)
 800083c:	f000 ff25 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000846:	484e      	ldr	r0, [pc, #312]	@ (8000980 <display7SEG+0x39c>)
 8000848:	f000 ff1f 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000852:	484b      	ldr	r0, [pc, #300]	@ (8000980 <display7SEG+0x39c>)
 8000854:	f000 ff19 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET); //e
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800085e:	4848      	ldr	r0, [pc, #288]	@ (8000980 <display7SEG+0x39c>)
 8000860:	f000 ff13 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086a:	4845      	ldr	r0, [pc, #276]	@ (8000980 <display7SEG+0x39c>)
 800086c:	f000 ff0d 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000876:	4842      	ldr	r0, [pc, #264]	@ (8000980 <display7SEG+0x39c>)
 8000878:	f000 ff07 	bl	800168a <HAL_GPIO_WritePin>
		break;
 800087c:	e0ad      	b.n	80009da <display7SEG+0x3f6>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000884:	483e      	ldr	r0, [pc, #248]	@ (8000980 <display7SEG+0x39c>)
 8000886:	f000 ff00 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	483b      	ldr	r0, [pc, #236]	@ (8000980 <display7SEG+0x39c>)
 8000892:	f000 fefa 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089c:	4838      	ldr	r0, [pc, #224]	@ (8000980 <display7SEG+0x39c>)
 800089e:	f000 fef4 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET); //d
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008a8:	4835      	ldr	r0, [pc, #212]	@ (8000980 <display7SEG+0x39c>)
 80008aa:	f000 feee 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b4:	4832      	ldr	r0, [pc, #200]	@ (8000980 <display7SEG+0x39c>)
 80008b6:	f000 fee8 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET); //f
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	482f      	ldr	r0, [pc, #188]	@ (8000980 <display7SEG+0x39c>)
 80008c2:	f000 fee2 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET); //g
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008cc:	482c      	ldr	r0, [pc, #176]	@ (8000980 <display7SEG+0x39c>)
 80008ce:	f000 fedc 	bl	800168a <HAL_GPIO_WritePin>
		break;
 80008d2:	e082      	b.n	80009da <display7SEG+0x3f6>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008da:	4829      	ldr	r0, [pc, #164]	@ (8000980 <display7SEG+0x39c>)
 80008dc:	f000 fed5 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e6:	4826      	ldr	r0, [pc, #152]	@ (8000980 <display7SEG+0x39c>)
 80008e8:	f000 fecf 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f2:	4823      	ldr	r0, [pc, #140]	@ (8000980 <display7SEG+0x39c>)
 80008f4:	f000 fec9 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008fe:	4820      	ldr	r0, [pc, #128]	@ (8000980 <display7SEG+0x39c>)
 8000900:	f000 fec3 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET); //e
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800090a:	481d      	ldr	r0, [pc, #116]	@ (8000980 <display7SEG+0x39c>)
 800090c:	f000 febd 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000916:	481a      	ldr	r0, [pc, #104]	@ (8000980 <display7SEG+0x39c>)
 8000918:	f000 feb7 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000922:	4817      	ldr	r0, [pc, #92]	@ (8000980 <display7SEG+0x39c>)
 8000924:	f000 feb1 	bl	800168a <HAL_GPIO_WritePin>
		break;
 8000928:	e057      	b.n	80009da <display7SEG+0x3f6>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000930:	4813      	ldr	r0, [pc, #76]	@ (8000980 <display7SEG+0x39c>)
 8000932:	f000 feaa 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800093c:	4810      	ldr	r0, [pc, #64]	@ (8000980 <display7SEG+0x39c>)
 800093e:	f000 fea4 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000948:	480d      	ldr	r0, [pc, #52]	@ (8000980 <display7SEG+0x39c>)
 800094a:	f000 fe9e 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000954:	480a      	ldr	r0, [pc, #40]	@ (8000980 <display7SEG+0x39c>)
 8000956:	f000 fe98 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <display7SEG+0x39c>)
 8000962:	f000 fe92 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <display7SEG+0x39c>)
 800096e:	f000 fe8c 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000978:	4801      	ldr	r0, [pc, #4]	@ (8000980 <display7SEG+0x39c>)
 800097a:	f000 fe86 	bl	800168a <HAL_GPIO_WritePin>
		break;
 800097e:	e02c      	b.n	80009da <display7SEG+0x3f6>
 8000980:	40010c00 	.word	0x40010c00

	default:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET); //a
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800098a:	4816      	ldr	r0, [pc, #88]	@ (80009e4 <display7SEG+0x400>)
 800098c:	f000 fe7d 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET); //b
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000996:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <display7SEG+0x400>)
 8000998:	f000 fe77 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET); //c
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a2:	4810      	ldr	r0, [pc, #64]	@ (80009e4 <display7SEG+0x400>)
 80009a4:	f000 fe71 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET); //d
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ae:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <display7SEG+0x400>)
 80009b0:	f000 fe6b 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ba:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <display7SEG+0x400>)
 80009bc:	f000 fe65 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET); //f
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c6:	4807      	ldr	r0, [pc, #28]	@ (80009e4 <display7SEG+0x400>)
 80009c8:	f000 fe5f 	bl	800168a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET); //g
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d2:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <display7SEG+0x400>)
 80009d4:	f000 fe59 	bl	800168a <HAL_GPIO_WritePin>
		break;
 80009d8:	bf00      	nop
	}

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <update7SEG>:
void update7SEG(int index){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	switch (index){
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d85e      	bhi.n	8000ab4 <update7SEG+0xcc>
 80009f6:	a201      	add	r2, pc, #4	@ (adr r2, 80009fc <update7SEG+0x14>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a0d 	.word	0x08000a0d
 8000a00:	08000a37 	.word	0x08000a37
 8000a04:	08000a61 	.word	0x08000a61
 8000a08:	08000a8b 	.word	0x08000a8b
	 	 case 0:
	 //Display the first 7SEG with led_buffer[0]
	 		 HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2101      	movs	r1, #1
 8000a10:	482e      	ldr	r0, [pc, #184]	@ (8000acc <update7SEG+0xe4>)
 8000a12:	f000 fe3a 	bl	800168a <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2102      	movs	r1, #2
 8000a1a:	482c      	ldr	r0, [pc, #176]	@ (8000acc <update7SEG+0xe4>)
 8000a1c:	f000 fe35 	bl	800168a <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2104      	movs	r1, #4
 8000a24:	4829      	ldr	r0, [pc, #164]	@ (8000acc <update7SEG+0xe4>)
 8000a26:	f000 fe30 	bl	800168a <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	4827      	ldr	r0, [pc, #156]	@ (8000acc <update7SEG+0xe4>)
 8000a30:	f000 fe2b 	bl	800168a <HAL_GPIO_WritePin>
	 		 break;
 8000a34:	e03f      	b.n	8000ab6 <update7SEG+0xce>
	 	 case 1:
	 //Display the second 7SEG with led_buffer[1]
	 		HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4824      	ldr	r0, [pc, #144]	@ (8000acc <update7SEG+0xe4>)
 8000a3c:	f000 fe25 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	4821      	ldr	r0, [pc, #132]	@ (8000acc <update7SEG+0xe4>)
 8000a46:	f000 fe20 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	481f      	ldr	r0, [pc, #124]	@ (8000acc <update7SEG+0xe4>)
 8000a50:	f000 fe1b 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2108      	movs	r1, #8
 8000a58:	481c      	ldr	r0, [pc, #112]	@ (8000acc <update7SEG+0xe4>)
 8000a5a:	f000 fe16 	bl	800168a <HAL_GPIO_WritePin>

	 		 break;
 8000a5e:	e02a      	b.n	8000ab6 <update7SEG+0xce>
	 	 case 2:
	 //Display the third 7SEG with led_buffer[2]
	 		HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2101      	movs	r1, #1
 8000a64:	4819      	ldr	r0, [pc, #100]	@ (8000acc <update7SEG+0xe4>)
 8000a66:	f000 fe10 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4817      	ldr	r0, [pc, #92]	@ (8000acc <update7SEG+0xe4>)
 8000a70:	f000 fe0b 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2104      	movs	r1, #4
 8000a78:	4814      	ldr	r0, [pc, #80]	@ (8000acc <update7SEG+0xe4>)
 8000a7a:	f000 fe06 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	4812      	ldr	r0, [pc, #72]	@ (8000acc <update7SEG+0xe4>)
 8000a84:	f000 fe01 	bl	800168a <HAL_GPIO_WritePin>
	 		 break;
 8000a88:	e015      	b.n	8000ab6 <update7SEG+0xce>
	 	 case 3:
	 //Display the forth 7SEG with led_buffer[3]
	 		HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	480f      	ldr	r0, [pc, #60]	@ (8000acc <update7SEG+0xe4>)
 8000a90:	f000 fdfb 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2102      	movs	r1, #2
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <update7SEG+0xe4>)
 8000a9a:	f000 fdf6 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	480a      	ldr	r0, [pc, #40]	@ (8000acc <update7SEG+0xe4>)
 8000aa4:	f000 fdf1 	bl	800168a <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4807      	ldr	r0, [pc, #28]	@ (8000acc <update7SEG+0xe4>)
 8000aae:	f000 fdec 	bl	800168a <HAL_GPIO_WritePin>
	 		 break;
 8000ab2:	e000      	b.n	8000ab6 <update7SEG+0xce>
	 	 default:
	 		 break;
 8000ab4:	bf00      	nop
		}
		display7SEG(led_buffer[index]);
 8000ab6:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <update7SEG+0xe8>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd90 	bl	80005e4 <display7SEG>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	20000014 	.word	0x20000014

08000ad4 <update7SegBuffer>:
void update7SegBuffer(int index,int value){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	if(value <= 0){
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dc05      	bgt.n	8000af0 <update7SegBuffer+0x1c>
		led_buffer[index] = 0;
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <update7SegBuffer+0x30>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else led_buffer[index] = value;
}
 8000aee:	e004      	b.n	8000afa <update7SegBuffer+0x26>
	else led_buffer[index] = value;
 8000af0:	4904      	ldr	r1, [pc, #16]	@ (8000b04 <update7SegBuffer+0x30>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000014 	.word	0x20000014

08000b08 <led_red_and_green>:
 */
#include "main.h"
#include "light_traffic.h"
#include "led7_segment.h"

void led_red_and_green(){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b12:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <led_red_and_green+0x50>)
 8000b14:	f000 fdb9 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <led_red_and_green+0x50>)
 8000b20:	f000 fdb3 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b2a:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <led_red_and_green+0x50>)
 8000b2c:	f000 fdad 	bl	800168a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin,RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b36:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <led_red_and_green+0x50>)
 8000b38:	f000 fda7 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <led_red_and_green+0x50>)
 8000b44:	f000 fda1 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4e:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <led_red_and_green+0x50>)
 8000b50:	f000 fd9b 	bl	800168a <HAL_GPIO_WritePin>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40010800 	.word	0x40010800

08000b5c <led_red_and_yellow>:
void led_red_and_yellow(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b66:	4811      	ldr	r0, [pc, #68]	@ (8000bac <led_red_and_yellow+0x50>)
 8000b68:	f000 fd8f 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <led_red_and_yellow+0x50>)
 8000b74:	f000 fd89 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b7e:	480b      	ldr	r0, [pc, #44]	@ (8000bac <led_red_and_yellow+0x50>)
 8000b80:	f000 fd83 	bl	800168a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin,SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b8a:	4808      	ldr	r0, [pc, #32]	@ (8000bac <led_red_and_yellow+0x50>)
 8000b8c:	f000 fd7d 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <led_red_and_yellow+0x50>)
 8000b98:	f000 fd77 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba2:	4802      	ldr	r0, [pc, #8]	@ (8000bac <led_red_and_yellow+0x50>)
 8000ba4:	f000 fd71 	bl	800168a <HAL_GPIO_WritePin>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40010800 	.word	0x40010800

08000bb0 <led_green_and_red>:
void led_green_and_red(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bba:	4811      	ldr	r0, [pc, #68]	@ (8000c00 <led_green_and_red+0x50>)
 8000bbc:	f000 fd65 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bc6:	480e      	ldr	r0, [pc, #56]	@ (8000c00 <led_green_and_red+0x50>)
 8000bc8:	f000 fd5f 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bd2:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <led_green_and_red+0x50>)
 8000bd4:	f000 fd59 	bl	800168a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin,RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bde:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <led_green_and_red+0x50>)
 8000be0:	f000 fd53 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <led_green_and_red+0x50>)
 8000bec:	f000 fd4d 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf6:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <led_green_and_red+0x50>)
 8000bf8:	f000 fd47 	bl	800168a <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40010800 	.word	0x40010800

08000c04 <led_yellow_and_red>:
void led_yellow_and_red(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c0e:	4811      	ldr	r0, [pc, #68]	@ (8000c54 <led_yellow_and_red+0x50>)
 8000c10:	f000 fd3b 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <led_yellow_and_red+0x50>)
 8000c1c:	f000 fd35 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c26:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <led_yellow_and_red+0x50>)
 8000c28:	f000 fd2f 	bl	800168a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin,RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <led_yellow_and_red+0x50>)
 8000c34:	f000 fd29 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <led_yellow_and_red+0x50>)
 8000c40:	f000 fd23 	bl	800168a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4a:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <led_yellow_and_red+0x50>)
 8000c4c:	f000 fd1d 	bl	800168a <HAL_GPIO_WritePin>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40010800 	.word	0x40010800

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f000 fa12 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f80c 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f000 f892 	bl	8000d8c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c68:	f000 f844 	bl	8000cf4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 // setTimer(0,1000);	unit test led
  HAL_TIM_Base_Start_IT(&htim2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <main+0x20>)
 8000c6e:	f001 f953 	bl	8001f18 <HAL_TIM_Base_Start_IT>
//		  setTimer(0,1000);
//	  }
//	  if(isButtonPressed(0)){
//		  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin); unit test button
//	  }
	  fsm_autorun();
 8000c72:	f7ff fb25 	bl	80002c0 <fsm_autorun>
 8000c76:	e7fc      	b.n	8000c72 <main+0x1a>
 8000c78:	200000f0 	.word	0x200000f0

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b090      	sub	sp, #64	@ 0x40
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0318 	add.w	r3, r7, #24
 8000c86:	2228      	movs	r2, #40	@ 0x28
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fcd0 	bl	8002630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fd02 	bl	80016bc <HAL_RCC_OscConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cbe:	f000 f8d3 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 ff70 	bl	8001bc0 <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ce6:	f000 f8bf 	bl	8000e68 <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3740      	adds	r7, #64	@ 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d1a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d28:	2209      	movs	r2, #9
 8000d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d38:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d3a:	f001 f89d 	bl	8001e78 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d44:	f000 f890 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d56:	f001 fa1b 	bl	8002190 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 f882 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_TIM2_Init+0x94>)
 8000d72:	f001 fbf3 	bl	800255c <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f874 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000f0 	.word	0x200000f0

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <MX_GPIO_Init+0xb8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a27      	ldr	r2, [pc, #156]	@ (8000e44 <MX_GPIO_Init+0xb8>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <MX_GPIO_Init+0xb8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <MX_GPIO_Init+0xb8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <MX_GPIO_Init+0xb8>)
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <MX_GPIO_Init+0xb8>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f64f 41ff 	movw	r1, #64767	@ 0xfcff
 8000dd6:	481c      	ldr	r0, [pc, #112]	@ (8000e48 <MX_GPIO_Init+0xbc>)
 8000dd8:	f000 fc57 	bl	800168a <HAL_GPIO_WritePin>
                          |EN4_Pin|EN5_Pin|EN6_Pin|EN7_Pin
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000de2:	481a      	ldr	r0, [pc, #104]	@ (8000e4c <MX_GPIO_Init+0xc0>)
 8000de4:	f000 fc51 	bl	800168a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           EN4_Pin EN5_Pin EN6_Pin EN7_Pin
                           LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000de8:	f64f 43ff 	movw	r3, #64767	@ 0xfcff
 8000dec:	60bb      	str	r3, [r7, #8]
                          |EN4_Pin|EN5_Pin|EN6_Pin|EN7_Pin
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2302      	movs	r3, #2
 8000df8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <MX_GPIO_Init+0xbc>)
 8000e02:	f000 faaf 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin LED_Pin SEG0_Pin SEG1_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
 8000e06:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000e0a:	60bb      	str	r3, [r7, #8]
                          |SEG6_Pin|LED_Pin|SEG0_Pin|SEG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2302      	movs	r3, #2
 8000e16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <MX_GPIO_Init+0xc0>)
 8000e20:	f000 faa0 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON3_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON3_Pin|BUTTON2_Pin;
 8000e24:	2338      	movs	r3, #56	@ 0x38
 8000e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4619      	mov	r1, r3
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_GPIO_Init+0xc0>)
 8000e38:	f000 fa94 	bl	8001364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	timerRun();
 8000e58:	f000 f8be 	bl	8000fd8 <timerRun>
	getKeyInput();
 8000e5c:	f7ff f976 	bl	800014c <getKeyInput>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x8>

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_MspInit+0x60>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <HAL_MspInit+0x60>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee8:	d113      	bne.n	8000f12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <HAL_TIM_Base_MspInit+0x44>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <HAL_TIM_Base_MspInit+0x44>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <HAL_TIM_Base_MspInit+0x44>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	201c      	movs	r0, #28
 8000f08:	f000 f9f5 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f0c:	201c      	movs	r0, #28
 8000f0e:	f000 fa0e 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <NMI_Handler+0x4>

08000f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <MemManage_Handler+0x4>

08000f38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f8ce 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <TIM2_IRQHandler+0x10>)
 8000f7e:	f001 f817 	bl	8001fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000f0 	.word	0x200000f0

08000f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <setTimer>:
 *      Author: ADMIN
 */
#include "timer.h"
int software_timer[10] = {0};
int flag_timer[10] = {0};
void setTimer(int index,int duration){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	software_timer[index] = duration/TICK;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <setTimer+0x34>)
 8000fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000faa:	1092      	asrs	r2, r2, #2
 8000fac:	17db      	asrs	r3, r3, #31
 8000fae:	1ad2      	subs	r2, r2, r3
 8000fb0:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <setTimer+0x38>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	flag_timer[index] = 0;
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <setTimer+0x3c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	66666667 	.word	0x66666667
 8000fd0:	20000138 	.word	0x20000138
 8000fd4:	20000160 	.word	0x20000160

08000fd8 <timerRun>:
void timerRun(){
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e01b      	b.n	800101c <timerRun+0x44>
		software_timer[i]--;
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <timerRun+0x58>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	1e5a      	subs	r2, r3, #1
 8000fee:	4910      	ldr	r1, [pc, #64]	@ (8001030 <timerRun+0x58>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(software_timer[i] <= 0){
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <timerRun+0x58>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	dc09      	bgt.n	8001016 <timerRun+0x3e>
			software_timer[i] = 0;
 8001002:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <timerRun+0x58>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2100      	movs	r1, #0
 8001008:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			flag_timer[i] = 1;
 800100c:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <timerRun+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2101      	movs	r1, #1
 8001012:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<10;i++){
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3301      	adds	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b09      	cmp	r3, #9
 8001020:	dde0      	ble.n	8000fe4 <timerRun+0xc>
		}
	}
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000138 	.word	0x20000138
 8001034:	20000160 	.word	0x20000160

08001038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001038:	f7ff ffa8 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800103e:	490c      	ldr	r1, [pc, #48]	@ (8001070 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001054:	4c09      	ldr	r4, [pc, #36]	@ (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001062:	f001 faed 	bl	8002640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff fdf7 	bl	8000c58 <main>
  bx lr
 800106a:	4770      	bx	lr
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001074:	080026cc 	.word	0x080026cc
  ldr r2, =_sbss
 8001078:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800107c:	2000018c 	.word	0x2000018c

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_Init+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_Init+0x28>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f923 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	200f      	movs	r0, #15
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fee8 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f93b 	bl	800134a <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f903 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000024 	.word	0x20000024
 8001108:	2000002c 	.word	0x2000002c
 800110c:	20000028 	.word	0x20000028

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a03      	ldr	r2, [pc, #12]	@ (8001130 <HAL_IncTick+0x20>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	2000002c 	.word	0x2000002c
 8001130:	20000188 	.word	0x20000188

08001134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	@ (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000188 	.word	0x20000188

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4906      	ldr	r1, [pc, #24]	@ (80011e0 <__NVIC_EnableIRQ+0x34>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff90 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff2d 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff42 	bl	8001190 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff35 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b08b      	sub	sp, #44	@ 0x2c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e161      	b.n	800163c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001378:	2201      	movs	r2, #1
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8150 	bne.w	8001636 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a97      	ldr	r2, [pc, #604]	@ (80015f8 <HAL_GPIO_Init+0x294>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d05e      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013a0:	4a95      	ldr	r2, [pc, #596]	@ (80015f8 <HAL_GPIO_Init+0x294>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d875      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013a6:	4a95      	ldr	r2, [pc, #596]	@ (80015fc <HAL_GPIO_Init+0x298>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d058      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013ac:	4a93      	ldr	r2, [pc, #588]	@ (80015fc <HAL_GPIO_Init+0x298>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d86f      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013b2:	4a93      	ldr	r2, [pc, #588]	@ (8001600 <HAL_GPIO_Init+0x29c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d052      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013b8:	4a91      	ldr	r2, [pc, #580]	@ (8001600 <HAL_GPIO_Init+0x29c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d869      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013be:	4a91      	ldr	r2, [pc, #580]	@ (8001604 <HAL_GPIO_Init+0x2a0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d04c      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013c4:	4a8f      	ldr	r2, [pc, #572]	@ (8001604 <HAL_GPIO_Init+0x2a0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d863      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013ca:	4a8f      	ldr	r2, [pc, #572]	@ (8001608 <HAL_GPIO_Init+0x2a4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d046      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013d0:	4a8d      	ldr	r2, [pc, #564]	@ (8001608 <HAL_GPIO_Init+0x2a4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d85d      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d82a      	bhi.n	8001430 <HAL_GPIO_Init+0xcc>
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d859      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013de:	a201      	add	r2, pc, #4	@ (adr r2, 80013e4 <HAL_GPIO_Init+0x80>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	08001439 	.word	0x08001439
 80013ec:	0800144b 	.word	0x0800144b
 80013f0:	0800148d 	.word	0x0800148d
 80013f4:	08001493 	.word	0x08001493
 80013f8:	08001493 	.word	0x08001493
 80013fc:	08001493 	.word	0x08001493
 8001400:	08001493 	.word	0x08001493
 8001404:	08001493 	.word	0x08001493
 8001408:	08001493 	.word	0x08001493
 800140c:	08001493 	.word	0x08001493
 8001410:	08001493 	.word	0x08001493
 8001414:	08001493 	.word	0x08001493
 8001418:	08001493 	.word	0x08001493
 800141c:	08001493 	.word	0x08001493
 8001420:	08001493 	.word	0x08001493
 8001424:	08001493 	.word	0x08001493
 8001428:	08001441 	.word	0x08001441
 800142c:	08001455 	.word	0x08001455
 8001430:	4a76      	ldr	r2, [pc, #472]	@ (800160c <HAL_GPIO_Init+0x2a8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001436:	e02c      	b.n	8001492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e029      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	3304      	adds	r3, #4
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e024      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	3308      	adds	r3, #8
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e01f      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	330c      	adds	r3, #12
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e01a      	b.n	8001494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001466:	2304      	movs	r3, #4
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e013      	b.n	8001494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	611a      	str	r2, [r3, #16]
          break;
 800147e:	e009      	b.n	8001494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	615a      	str	r2, [r3, #20]
          break;
 800148a:	e003      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x130>
          break;
 8001492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2bff      	cmp	r3, #255	@ 0xff
 8001498:	d801      	bhi.n	800149e <HAL_GPIO_Init+0x13a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	e001      	b.n	80014a2 <HAL_GPIO_Init+0x13e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2bff      	cmp	r3, #255	@ 0xff
 80014a8:	d802      	bhi.n	80014b0 <HAL_GPIO_Init+0x14c>
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x152>
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	3b08      	subs	r3, #8
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	210f      	movs	r1, #15
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	6a39      	ldr	r1, [r7, #32]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80a9 	beq.w	8001636 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001610 <HAL_GPIO_Init+0x2ac>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a49      	ldr	r2, [pc, #292]	@ (8001610 <HAL_GPIO_Init+0x2ac>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b47      	ldr	r3, [pc, #284]	@ (8001610 <HAL_GPIO_Init+0x2ac>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014fc:	4a45      	ldr	r2, [pc, #276]	@ (8001614 <HAL_GPIO_Init+0x2b0>)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3d      	ldr	r2, [pc, #244]	@ (8001618 <HAL_GPIO_Init+0x2b4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1e0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3c      	ldr	r2, [pc, #240]	@ (800161c <HAL_GPIO_Init+0x2b8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1dc>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3b      	ldr	r2, [pc, #236]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1d8>
 8001538:	2302      	movs	r3, #2
 800153a:	e004      	b.n	8001546 <HAL_GPIO_Init+0x1e2>
 800153c:	2303      	movs	r3, #3
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x1e2>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_GPIO_Init+0x1e2>
 8001544:	2300      	movs	r3, #0
 8001546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001548:	f002 0203 	and.w	r2, r2, #3
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	4093      	lsls	r3, r2
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001556:	492f      	ldr	r1, [pc, #188]	@ (8001614 <HAL_GPIO_Init+0x2b0>)
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001570:	4b2c      	ldr	r3, [pc, #176]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	492b      	ldr	r1, [pc, #172]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800157e:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	43db      	mvns	r3, r3
 8001586:	4927      	ldr	r1, [pc, #156]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 8001588:	4013      	ands	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001598:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	4921      	ldr	r1, [pc, #132]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	491d      	ldr	r1, [pc, #116]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4917      	ldr	r1, [pc, #92]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4913      	ldr	r1, [pc, #76]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01f      	beq.n	8001628 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	490d      	ldr	r1, [pc, #52]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	e01f      	b.n	8001636 <HAL_GPIO_Init+0x2d2>
 80015f6:	bf00      	nop
 80015f8:	10320000 	.word	0x10320000
 80015fc:	10310000 	.word	0x10310000
 8001600:	10220000 	.word	0x10220000
 8001604:	10210000 	.word	0x10210000
 8001608:	10120000 	.word	0x10120000
 800160c:	10110000 	.word	0x10110000
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000
 8001618:	40010800 	.word	0x40010800
 800161c:	40010c00 	.word	0x40010c00
 8001620:	40011000 	.word	0x40011000
 8001624:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_GPIO_Init+0x2f4>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	43db      	mvns	r3, r3
 8001630:	4909      	ldr	r1, [pc, #36]	@ (8001658 <HAL_GPIO_Init+0x2f4>)
 8001632:	4013      	ands	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	3301      	adds	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	fa22 f303 	lsr.w	r3, r2, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f ae96 	bne.w	8001378 <HAL_GPIO_Init+0x14>
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	372c      	adds	r7, #44	@ 0x2c
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]
 8001696:	4613      	mov	r3, r2
 8001698:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800169a:	787b      	ldrb	r3, [r7, #1]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016a0:	887a      	ldrh	r2, [r7, #2]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016a6:	e003      	b.n	80016b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	041a      	lsls	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e272      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8087 	beq.w	80017ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016dc:	4b92      	ldr	r3, [pc, #584]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d00c      	beq.n	8001702 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d112      	bne.n	800171a <HAL_RCC_OscConfig+0x5e>
 80016f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d10b      	bne.n	800171a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d06c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x12c>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d168      	bne.n	80017e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e24c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x76>
 8001724:	4b80      	ldr	r3, [pc, #512]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a7f      	ldr	r2, [pc, #508]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e02e      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x98>
 800173a:	4b7b      	ldr	r3, [pc, #492]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7a      	ldr	r2, [pc, #488]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b78      	ldr	r3, [pc, #480]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a77      	ldr	r2, [pc, #476]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e01d      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0xbc>
 800175e:	4b72      	ldr	r3, [pc, #456]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a71      	ldr	r2, [pc, #452]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b6f      	ldr	r3, [pc, #444]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a6e      	ldr	r2, [pc, #440]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0xd4>
 8001778:	4b6b      	ldr	r3, [pc, #428]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a6a      	ldr	r2, [pc, #424]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800177e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b68      	ldr	r3, [pc, #416]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a67      	ldr	r2, [pc, #412]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800178a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fccc 	bl	8001134 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fcc8 	bl	8001134 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	@ 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e200      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0xe4>
 80017be:	e014      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fcb8 	bl	8001134 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fcb4 	bl	8001134 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	@ 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e1ec      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x10c>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d063      	beq.n	80018be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001802:	4b49      	ldr	r3, [pc, #292]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b08      	cmp	r3, #8
 800180c:	d11c      	bne.n	8001848 <HAL_RCC_OscConfig+0x18c>
 800180e:	4b46      	ldr	r3, [pc, #280]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x176>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1c0      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4939      	ldr	r1, [pc, #228]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e03a      	b.n	80018be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b36      	ldr	r3, [pc, #216]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fc6d 	bl	8001134 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff fc69 	bl	8001134 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1a1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4927      	ldr	r1, [pc, #156]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_RCC_OscConfig+0x270>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fc4c 	bl	8001134 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fc48 	bl	8001134 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e180      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d03a      	beq.n	8001940 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d019      	beq.n	8001906 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <HAL_RCC_OscConfig+0x274>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff fc2c 	bl	8001134 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fc28 	bl	8001134 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e160      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018fe:	2001      	movs	r0, #1
 8001900:	f000 fa9c 	bl	8001e3c <RCC_Delay>
 8001904:	e01c      	b.n	8001940 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_RCC_OscConfig+0x274>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fc12 	bl	8001134 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001912:	e00f      	b.n	8001934 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fc0e 	bl	8001134 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d908      	bls.n	8001934 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e146      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	42420000 	.word	0x42420000
 8001930:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	4b92      	ldr	r3, [pc, #584]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e9      	bne.n	8001914 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a6 	beq.w	8001a9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001952:	4b8b      	ldr	r3, [pc, #556]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10d      	bne.n	800197a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b88      	ldr	r3, [pc, #544]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a87      	ldr	r2, [pc, #540]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b85      	ldr	r3, [pc, #532]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001976:	2301      	movs	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b82      	ldr	r3, [pc, #520]	@ (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d118      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	4b7f      	ldr	r3, [pc, #508]	@ (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001992:	f7ff fbcf 	bl	8001134 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199a:	f7ff fbcb 	bl	8001134 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b64      	cmp	r3, #100	@ 0x64
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e103      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	4b75      	ldr	r3, [pc, #468]	@ (8001b84 <HAL_RCC_OscConfig+0x4c8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x312>
 80019c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	e02d      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x334>
 80019d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a69      	ldr	r2, [pc, #420]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6213      	str	r3, [r2, #32]
 80019e2:	4b67      	ldr	r3, [pc, #412]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a66      	ldr	r2, [pc, #408]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6213      	str	r3, [r2, #32]
 80019ee:	e01c      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d10c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x356>
 80019f8:	4b61      	ldr	r3, [pc, #388]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a60      	ldr	r2, [pc, #384]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	4b5e      	ldr	r3, [pc, #376]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a5d      	ldr	r2, [pc, #372]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	e00b      	b.n	8001a2a <HAL_RCC_OscConfig+0x36e>
 8001a12:	4b5b      	ldr	r3, [pc, #364]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a5a      	ldr	r2, [pc, #360]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	4b58      	ldr	r3, [pc, #352]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a57      	ldr	r2, [pc, #348]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d015      	beq.n	8001a5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fb7f 	bl	8001134 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fb7b 	bl	8001134 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0b1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	4b4b      	ldr	r3, [pc, #300]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ee      	beq.n	8001a3a <HAL_RCC_OscConfig+0x37e>
 8001a5c:	e014      	b.n	8001a88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fb69 	bl	8001134 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff fb65 	bl	8001134 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e09b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	4b40      	ldr	r3, [pc, #256]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ee      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d105      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a3b      	ldr	r2, [pc, #236]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8087 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa4:	4b36      	ldr	r3, [pc, #216]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d061      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d146      	bne.n	8001b46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab8:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fb39 	bl	8001134 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff fb35 	bl	8001134 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e06d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aec:	d108      	bne.n	8001b00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aee:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4921      	ldr	r1, [pc, #132]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a19      	ldr	r1, [r3, #32]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	430b      	orrs	r3, r1
 8001b12:	491b      	ldr	r1, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fb09 	bl	8001134 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff fb05 	bl	8001134 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e03d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x46a>
 8001b44:	e035      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_RCC_OscConfig+0x4cc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff faf2 	bl	8001134 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff faee 	bl	8001134 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e026      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x498>
 8001b72:	e01e      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e019      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40007000 	.word	0x40007000
 8001b88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_RCC_OscConfig+0x500>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0d0      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d910      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b67      	ldr	r3, [pc, #412]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4965      	ldr	r1, [pc, #404]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b8      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b59      	ldr	r3, [pc, #356]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a58      	ldr	r2, [pc, #352]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c34:	4b53      	ldr	r3, [pc, #332]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b50      	ldr	r3, [pc, #320]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	494d      	ldr	r1, [pc, #308]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d040      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e073      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e06b      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4936      	ldr	r1, [pc, #216]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fa40 	bl	8001134 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff fa3c 	bl	8001134 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e053      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d210      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	4922      	ldr	r1, [pc, #136]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e032      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4916      	ldr	r1, [pc, #88]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3a:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	490e      	ldr	r1, [pc, #56]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4e:	f000 f821 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	490a      	ldr	r1, [pc, #40]	@ (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	5ccb      	ldrb	r3, [r1, r3]
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <HAL_RCC_ClockConfig+0x1cc>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_RCC_ClockConfig+0x1d0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f99e 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	080026a0 	.word	0x080026a0
 8001d8c:	20000024 	.word	0x20000024
 8001d90:	20000028 	.word	0x20000028

08001d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d002      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d003      	beq.n	8001dca <HAL_RCC_GetSysClockFreq+0x36>
 8001dc2:	e027      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001dc6:	613b      	str	r3, [r7, #16]
      break;
 8001dc8:	e027      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0c9b      	lsrs	r3, r3, #18
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	0c5b      	lsrs	r3, r3, #17
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	4a11      	ldr	r2, [pc, #68]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001df6:	fb03 f202 	mul.w	r2, r3, r2
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e004      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0c      	ldr	r2, [pc, #48]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	613b      	str	r3, [r7, #16]
      break;
 8001e12:	e002      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e16:	613b      	str	r3, [r7, #16]
      break;
 8001e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1a:	693b      	ldr	r3, [r7, #16]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	007a1200 	.word	0x007a1200
 8001e30:	080026b0 	.word	0x080026b0
 8001e34:	080026c0 	.word	0x080026c0
 8001e38:	003d0900 	.word	0x003d0900

08001e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e44:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <RCC_Delay+0x34>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <RCC_Delay+0x38>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0a5b      	lsrs	r3, r3, #9
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e58:	bf00      	nop
  }
  while (Delay --);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f9      	bne.n	8001e58 <RCC_Delay+0x1c>
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000024 	.word	0x20000024
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e041      	b.n	8001f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff f81a 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f000 fa56 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d001      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e035      	b.n	8001f9c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_TIM_Base_Start_IT+0x90>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_TIM_Base_Start_IT+0x4e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5a:	d004      	beq.n	8001f66 <HAL_TIM_Base_Start_IT+0x4e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <HAL_TIM_Base_Start_IT+0x94>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d111      	bne.n	8001f8a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d010      	beq.n	8001f9a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f88:	e007      	b.n	8001f9a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40000400 	.word	0x40000400

08001fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0202 	mvn.w	r2, #2
 8001fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f998 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f98b 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f99a 	bl	8002342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d020      	beq.n	8002060 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0204 	mvn.w	r2, #4
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f972 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f965 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f974 	bl	8002342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d020      	beq.n	80020ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01b      	beq.n	80020ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0208 	mvn.w	r2, #8
 800207c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2204      	movs	r2, #4
 8002082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f94c 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f93f 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f94e 	bl	8002342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d020      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01b      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2208      	movs	r2, #8
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f926 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f919 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f928 	bl	8002342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00c      	beq.n	800211c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0201 	mvn.w	r2, #1
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe fe9a 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00c      	beq.n	8002140 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fa6f 	bl	800261e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8f8 	bl	8002354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00c      	beq.n	8002188 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0220 	mvn.w	r2, #32
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa42 	bl	800260c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_TIM_ConfigClockSource+0x1c>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e0b4      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x186>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e4:	d03e      	beq.n	8002264 <HAL_TIM_ConfigClockSource+0xd4>
 80021e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ea:	f200 8087 	bhi.w	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f2:	f000 8086 	beq.w	8002302 <HAL_TIM_ConfigClockSource+0x172>
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021fa:	d87f      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b70      	cmp	r3, #112	@ 0x70
 80021fe:	d01a      	beq.n	8002236 <HAL_TIM_ConfigClockSource+0xa6>
 8002200:	2b70      	cmp	r3, #112	@ 0x70
 8002202:	d87b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b60      	cmp	r3, #96	@ 0x60
 8002206:	d050      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x11a>
 8002208:	2b60      	cmp	r3, #96	@ 0x60
 800220a:	d877      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b50      	cmp	r3, #80	@ 0x50
 800220e:	d03c      	beq.n	800228a <HAL_TIM_ConfigClockSource+0xfa>
 8002210:	2b50      	cmp	r3, #80	@ 0x50
 8002212:	d873      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b40      	cmp	r3, #64	@ 0x40
 8002216:	d058      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x13a>
 8002218:	2b40      	cmp	r3, #64	@ 0x40
 800221a:	d86f      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b30      	cmp	r3, #48	@ 0x30
 800221e:	d064      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	2b30      	cmp	r3, #48	@ 0x30
 8002222:	d86b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b20      	cmp	r3, #32
 8002226:	d060      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002228:	2b20      	cmp	r3, #32
 800222a:	d867      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05c      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002230:	2b10      	cmp	r3, #16
 8002232:	d05a      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002234:	e062      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002246:	f000 f96a 	bl	800251e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	609a      	str	r2, [r3, #8]
      break;
 8002262:	e04f      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002274:	f000 f953 	bl	800251e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002286:	609a      	str	r2, [r3, #8]
      break;
 8002288:	e03c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002296:	461a      	mov	r2, r3
 8002298:	f000 f8ca 	bl	8002430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2150      	movs	r1, #80	@ 0x50
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f921 	bl	80024ea <TIM_ITRx_SetConfig>
      break;
 80022a8:	e02c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022b6:	461a      	mov	r2, r3
 80022b8:	f000 f8e8 	bl	800248c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2160      	movs	r1, #96	@ 0x60
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f911 	bl	80024ea <TIM_ITRx_SetConfig>
      break;
 80022c8:	e01c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d6:	461a      	mov	r2, r3
 80022d8:	f000 f8aa 	bl	8002430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2140      	movs	r1, #64	@ 0x40
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f901 	bl	80024ea <TIM_ITRx_SetConfig>
      break;
 80022e8:	e00c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f000 f8f8 	bl	80024ea <TIM_ITRx_SetConfig>
      break;
 80022fa:	e003      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002300:	e000      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
	...

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a2b      	ldr	r2, [pc, #172]	@ (8002428 <TIM_Base_SetConfig+0xc0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <TIM_Base_SetConfig+0x28>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0x28>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a28      	ldr	r2, [pc, #160]	@ (800242c <TIM_Base_SetConfig+0xc4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d108      	bne.n	80023a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a20      	ldr	r2, [pc, #128]	@ (8002428 <TIM_Base_SetConfig+0xc0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x52>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x52>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	@ (800242c <TIM_Base_SetConfig+0xc4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002428 <TIM_Base_SetConfig+0xc0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f023 0201 	bic.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
  }
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40000400 	.word	0x40000400

08002430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f023 0201 	bic.w	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800245a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f023 030a 	bic.w	r3, r3, #10
 800246c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	f023 0210 	bic.w	r2, r3, #16
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	031b      	lsls	r3, r3, #12
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	621a      	str	r2, [r3, #32]
}
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	f043 0307 	orr.w	r3, r3, #7
 800250c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	609a      	str	r2, [r3, #8]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800251e:	b480      	push	{r7}
 8002520:	b087      	sub	sp, #28
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002538:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	021a      	lsls	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	431a      	orrs	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4313      	orrs	r3, r2
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	609a      	str	r2, [r3, #8]
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002570:	2302      	movs	r3, #2
 8002572:	e041      	b.n	80025f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a14      	ldr	r2, [pc, #80]	@ (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c0:	d004      	beq.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a10      	ldr	r2, [pc, #64]	@ (8002608 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d10c      	bne.n	80025e6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400

0800260c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <memset>:
 8002630:	4603      	mov	r3, r0
 8002632:	4402      	add	r2, r0
 8002634:	4293      	cmp	r3, r2
 8002636:	d100      	bne.n	800263a <memset+0xa>
 8002638:	4770      	bx	lr
 800263a:	f803 1b01 	strb.w	r1, [r3], #1
 800263e:	e7f9      	b.n	8002634 <memset+0x4>

08002640 <__libc_init_array>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	2600      	movs	r6, #0
 8002644:	4d0c      	ldr	r5, [pc, #48]	@ (8002678 <__libc_init_array+0x38>)
 8002646:	4c0d      	ldr	r4, [pc, #52]	@ (800267c <__libc_init_array+0x3c>)
 8002648:	1b64      	subs	r4, r4, r5
 800264a:	10a4      	asrs	r4, r4, #2
 800264c:	42a6      	cmp	r6, r4
 800264e:	d109      	bne.n	8002664 <__libc_init_array+0x24>
 8002650:	f000 f81a 	bl	8002688 <_init>
 8002654:	2600      	movs	r6, #0
 8002656:	4d0a      	ldr	r5, [pc, #40]	@ (8002680 <__libc_init_array+0x40>)
 8002658:	4c0a      	ldr	r4, [pc, #40]	@ (8002684 <__libc_init_array+0x44>)
 800265a:	1b64      	subs	r4, r4, r5
 800265c:	10a4      	asrs	r4, r4, #2
 800265e:	42a6      	cmp	r6, r4
 8002660:	d105      	bne.n	800266e <__libc_init_array+0x2e>
 8002662:	bd70      	pop	{r4, r5, r6, pc}
 8002664:	f855 3b04 	ldr.w	r3, [r5], #4
 8002668:	4798      	blx	r3
 800266a:	3601      	adds	r6, #1
 800266c:	e7ee      	b.n	800264c <__libc_init_array+0xc>
 800266e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002672:	4798      	blx	r3
 8002674:	3601      	adds	r6, #1
 8002676:	e7f2      	b.n	800265e <__libc_init_array+0x1e>
 8002678:	080026c4 	.word	0x080026c4
 800267c:	080026c4 	.word	0x080026c4
 8002680:	080026c4 	.word	0x080026c4
 8002684:	080026c8 	.word	0x080026c8

08002688 <_init>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr

08002694 <_fini>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr
